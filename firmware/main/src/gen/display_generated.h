// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DISPLAY_DISPLAY_H_
#define FLATBUFFERS_GENERATED_DISPLAY_DISPLAY_H_

#include "flatbuffers/flatbuffers.h"

namespace Display {

struct ClearDisplay;

struct ShowUserDetails;

struct BeginJobTimer;

struct UpdateJobTimer;

struct StopJobTimer;

struct ShowMessage;

struct ProgressBar;

struct DisplayIntent;

inline const flatbuffers::TypeTable *ClearDisplayTypeTable();

inline const flatbuffers::TypeTable *ShowUserDetailsTypeTable();

inline const flatbuffers::TypeTable *BeginJobTimerTypeTable();

inline const flatbuffers::TypeTable *UpdateJobTimerTypeTable();

inline const flatbuffers::TypeTable *StopJobTimerTypeTable();

inline const flatbuffers::TypeTable *ShowMessageTypeTable();

inline const flatbuffers::TypeTable *ProgressBarTypeTable();

inline const flatbuffers::TypeTable *DisplayIntentTypeTable();

enum class Icon : int16_t {
  None = 0,
  Healthy = 1,
  Warning = 2,
  Error = 3,
  HeavyCheckmark = 10004,
  MIN = None,
  MAX = HeavyCheckmark
};

inline const Icon (&EnumValuesIcon())[5] {
  static const Icon values[] = {
    Icon::None,
    Icon::Healthy,
    Icon::Warning,
    Icon::Error,
    Icon::HeavyCheckmark
  };
  return values;
}

inline const char *EnumNameIcon(Icon e) {
  switch (e) {
    case Icon::None: return "None";
    case Icon::Healthy: return "Healthy";
    case Icon::Warning: return "Warning";
    case Icon::Error: return "Error";
    case Icon::HeavyCheckmark: return "HeavyCheckmark";
    default: return "";
  }
}

enum class DisplayAction : uint8_t {
  NONE = 0,
  ClearDisplay = 1,
  ShowUserDetails = 2,
  BeginJobTimer = 3,
  UpdateJobTimer = 4,
  StopJobTimer = 5,
  ShowMessage = 6,
  ProgressBar = 7,
  MIN = NONE,
  MAX = ProgressBar
};

inline const DisplayAction (&EnumValuesDisplayAction())[8] {
  static const DisplayAction values[] = {
    DisplayAction::NONE,
    DisplayAction::ClearDisplay,
    DisplayAction::ShowUserDetails,
    DisplayAction::BeginJobTimer,
    DisplayAction::UpdateJobTimer,
    DisplayAction::StopJobTimer,
    DisplayAction::ShowMessage,
    DisplayAction::ProgressBar
  };
  return values;
}

inline const char * const *EnumNamesDisplayAction() {
  static const char * const names[] = {
    "NONE",
    "ClearDisplay",
    "ShowUserDetails",
    "BeginJobTimer",
    "UpdateJobTimer",
    "StopJobTimer",
    "ShowMessage",
    "ProgressBar",
    nullptr
  };
  return names;
}

inline const char *EnumNameDisplayAction(DisplayAction e) {
  if (e < DisplayAction::NONE || e > DisplayAction::ProgressBar) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesDisplayAction()[index];
}

template<typename T> struct DisplayActionTraits {
  static const DisplayAction enum_value = DisplayAction::NONE;
};

template<> struct DisplayActionTraits<ClearDisplay> {
  static const DisplayAction enum_value = DisplayAction::ClearDisplay;
};

template<> struct DisplayActionTraits<ShowUserDetails> {
  static const DisplayAction enum_value = DisplayAction::ShowUserDetails;
};

template<> struct DisplayActionTraits<BeginJobTimer> {
  static const DisplayAction enum_value = DisplayAction::BeginJobTimer;
};

template<> struct DisplayActionTraits<UpdateJobTimer> {
  static const DisplayAction enum_value = DisplayAction::UpdateJobTimer;
};

template<> struct DisplayActionTraits<StopJobTimer> {
  static const DisplayAction enum_value = DisplayAction::StopJobTimer;
};

template<> struct DisplayActionTraits<ShowMessage> {
  static const DisplayAction enum_value = DisplayAction::ShowMessage;
};

template<> struct DisplayActionTraits<ProgressBar> {
  static const DisplayAction enum_value = DisplayAction::ProgressBar;
};

bool VerifyDisplayAction(flatbuffers::Verifier &verifier, const void *obj, DisplayAction type);
bool VerifyDisplayActionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct ClearDisplay FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ClearDisplayTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.ClearDisplay";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ClearDisplayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ClearDisplayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ClearDisplayBuilder &operator=(const ClearDisplayBuilder &);
  flatbuffers::Offset<ClearDisplay> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClearDisplay>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClearDisplay> CreateClearDisplay(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ClearDisplayBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ShowUserDetails FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ShowUserDetailsTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.ShowUserDetails";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_EMAIL = 6,
    VT_MAKERLABS_ID = 8,
    VT_TAG_ID = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  flatbuffers::String *mutable_email() {
    return GetPointer<flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *makerlabs_id() const {
    return GetPointer<const flatbuffers::String *>(VT_MAKERLABS_ID);
  }
  flatbuffers::String *mutable_makerlabs_id() {
    return GetPointer<flatbuffers::String *>(VT_MAKERLABS_ID);
  }
  const flatbuffers::String *tag_id() const {
    return GetPointer<const flatbuffers::String *>(VT_TAG_ID);
  }
  flatbuffers::String *mutable_tag_id() {
    return GetPointer<flatbuffers::String *>(VT_TAG_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_MAKERLABS_ID) &&
           verifier.VerifyString(makerlabs_id()) &&
           VerifyOffset(verifier, VT_TAG_ID) &&
           verifier.VerifyString(tag_id()) &&
           verifier.EndTable();
  }
};

struct ShowUserDetailsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ShowUserDetails::VT_NAME, name);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(ShowUserDetails::VT_EMAIL, email);
  }
  void add_makerlabs_id(flatbuffers::Offset<flatbuffers::String> makerlabs_id) {
    fbb_.AddOffset(ShowUserDetails::VT_MAKERLABS_ID, makerlabs_id);
  }
  void add_tag_id(flatbuffers::Offset<flatbuffers::String> tag_id) {
    fbb_.AddOffset(ShowUserDetails::VT_TAG_ID, tag_id);
  }
  explicit ShowUserDetailsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShowUserDetailsBuilder &operator=(const ShowUserDetailsBuilder &);
  flatbuffers::Offset<ShowUserDetails> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShowUserDetails>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShowUserDetails> CreateShowUserDetails(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> makerlabs_id = 0,
    flatbuffers::Offset<flatbuffers::String> tag_id = 0) {
  ShowUserDetailsBuilder builder_(_fbb);
  builder_.add_tag_id(tag_id);
  builder_.add_makerlabs_id(makerlabs_id);
  builder_.add_email(email);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShowUserDetails> CreateShowUserDetailsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *email = nullptr,
    const char *makerlabs_id = nullptr,
    const char *tag_id = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto makerlabs_id__ = makerlabs_id ? _fbb.CreateString(makerlabs_id) : 0;
  auto tag_id__ = tag_id ? _fbb.CreateString(tag_id) : 0;
  return Display::CreateShowUserDetails(
      _fbb,
      name__,
      email__,
      makerlabs_id__,
      tag_id__);
}

struct BeginJobTimer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BeginJobTimerTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.BeginJobTimer";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BeginJobTimerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit BeginJobTimerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BeginJobTimerBuilder &operator=(const BeginJobTimerBuilder &);
  flatbuffers::Offset<BeginJobTimer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BeginJobTimer>(end);
    return o;
  }
};

inline flatbuffers::Offset<BeginJobTimer> CreateBeginJobTimer(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BeginJobTimerBuilder builder_(_fbb);
  return builder_.Finish();
}

struct UpdateJobTimer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UpdateJobTimerTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.UpdateJobTimer";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UpdateJobTimerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit UpdateJobTimerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UpdateJobTimerBuilder &operator=(const UpdateJobTimerBuilder &);
  flatbuffers::Offset<UpdateJobTimer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UpdateJobTimer>(end);
    return o;
  }
};

inline flatbuffers::Offset<UpdateJobTimer> CreateUpdateJobTimer(
    flatbuffers::FlatBufferBuilder &_fbb) {
  UpdateJobTimerBuilder builder_(_fbb);
  return builder_.Finish();
}

struct StopJobTimer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return StopJobTimerTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.StopJobTimer";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct StopJobTimerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit StopJobTimerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StopJobTimerBuilder &operator=(const StopJobTimerBuilder &);
  flatbuffers::Offset<StopJobTimer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StopJobTimer>(end);
    return o;
  }
};

inline flatbuffers::Offset<StopJobTimer> CreateStopJobTimer(
    flatbuffers::FlatBufferBuilder &_fbb) {
  StopJobTimerBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ShowMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ShowMessageTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.ShowMessage";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOP_LEFT_ICON = 4,
    VT_TOP_LEFT = 6,
    VT_TOP_LEFT_FONT_SIZE = 8,
    VT_TOP_RIGHT_ICON = 10,
    VT_TOP_RIGHT = 12,
    VT_TOP_RIGHT_FONT_SIZE = 14,
    VT_BOTTOM_LEFT_ICON = 16,
    VT_BOTTOM_LEFT = 18,
    VT_BOTTOM_LEFT_FONT_SIZE = 20,
    VT_BOTTOM_RIGHT_ICON = 22,
    VT_BOTTOM_RIGHT = 24,
    VT_BOTTOM_RIGHT_FONT_SIZE = 26
  };
  Icon top_left_icon() const {
    return static_cast<Icon>(GetField<int16_t>(VT_TOP_LEFT_ICON, 0));
  }
  bool mutate_top_left_icon(Icon _top_left_icon) {
    return SetField<int16_t>(VT_TOP_LEFT_ICON, static_cast<int16_t>(_top_left_icon), 0);
  }
  const flatbuffers::String *top_left() const {
    return GetPointer<const flatbuffers::String *>(VT_TOP_LEFT);
  }
  flatbuffers::String *mutable_top_left() {
    return GetPointer<flatbuffers::String *>(VT_TOP_LEFT);
  }
  int8_t top_left_font_size() const {
    return GetField<int8_t>(VT_TOP_LEFT_FONT_SIZE, 12);
  }
  bool mutate_top_left_font_size(int8_t _top_left_font_size) {
    return SetField<int8_t>(VT_TOP_LEFT_FONT_SIZE, _top_left_font_size, 12);
  }
  Icon top_right_icon() const {
    return static_cast<Icon>(GetField<int16_t>(VT_TOP_RIGHT_ICON, 0));
  }
  bool mutate_top_right_icon(Icon _top_right_icon) {
    return SetField<int16_t>(VT_TOP_RIGHT_ICON, static_cast<int16_t>(_top_right_icon), 0);
  }
  const flatbuffers::String *top_right() const {
    return GetPointer<const flatbuffers::String *>(VT_TOP_RIGHT);
  }
  flatbuffers::String *mutable_top_right() {
    return GetPointer<flatbuffers::String *>(VT_TOP_RIGHT);
  }
  int8_t top_right_font_size() const {
    return GetField<int8_t>(VT_TOP_RIGHT_FONT_SIZE, 12);
  }
  bool mutate_top_right_font_size(int8_t _top_right_font_size) {
    return SetField<int8_t>(VT_TOP_RIGHT_FONT_SIZE, _top_right_font_size, 12);
  }
  Icon bottom_left_icon() const {
    return static_cast<Icon>(GetField<int16_t>(VT_BOTTOM_LEFT_ICON, 0));
  }
  bool mutate_bottom_left_icon(Icon _bottom_left_icon) {
    return SetField<int16_t>(VT_BOTTOM_LEFT_ICON, static_cast<int16_t>(_bottom_left_icon), 0);
  }
  const flatbuffers::String *bottom_left() const {
    return GetPointer<const flatbuffers::String *>(VT_BOTTOM_LEFT);
  }
  flatbuffers::String *mutable_bottom_left() {
    return GetPointer<flatbuffers::String *>(VT_BOTTOM_LEFT);
  }
  int8_t bottom_left_font_size() const {
    return GetField<int8_t>(VT_BOTTOM_LEFT_FONT_SIZE, 12);
  }
  bool mutate_bottom_left_font_size(int8_t _bottom_left_font_size) {
    return SetField<int8_t>(VT_BOTTOM_LEFT_FONT_SIZE, _bottom_left_font_size, 12);
  }
  Icon bottom_right_icon() const {
    return static_cast<Icon>(GetField<int16_t>(VT_BOTTOM_RIGHT_ICON, 0));
  }
  bool mutate_bottom_right_icon(Icon _bottom_right_icon) {
    return SetField<int16_t>(VT_BOTTOM_RIGHT_ICON, static_cast<int16_t>(_bottom_right_icon), 0);
  }
  const flatbuffers::String *bottom_right() const {
    return GetPointer<const flatbuffers::String *>(VT_BOTTOM_RIGHT);
  }
  flatbuffers::String *mutable_bottom_right() {
    return GetPointer<flatbuffers::String *>(VT_BOTTOM_RIGHT);
  }
  int8_t bottom_right_font_size() const {
    return GetField<int8_t>(VT_BOTTOM_RIGHT_FONT_SIZE, 12);
  }
  bool mutate_bottom_right_font_size(int8_t _bottom_right_font_size) {
    return SetField<int8_t>(VT_BOTTOM_RIGHT_FONT_SIZE, _bottom_right_font_size, 12);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_TOP_LEFT_ICON) &&
           VerifyOffset(verifier, VT_TOP_LEFT) &&
           verifier.VerifyString(top_left()) &&
           VerifyField<int8_t>(verifier, VT_TOP_LEFT_FONT_SIZE) &&
           VerifyField<int16_t>(verifier, VT_TOP_RIGHT_ICON) &&
           VerifyOffset(verifier, VT_TOP_RIGHT) &&
           verifier.VerifyString(top_right()) &&
           VerifyField<int8_t>(verifier, VT_TOP_RIGHT_FONT_SIZE) &&
           VerifyField<int16_t>(verifier, VT_BOTTOM_LEFT_ICON) &&
           VerifyOffset(verifier, VT_BOTTOM_LEFT) &&
           verifier.VerifyString(bottom_left()) &&
           VerifyField<int8_t>(verifier, VT_BOTTOM_LEFT_FONT_SIZE) &&
           VerifyField<int16_t>(verifier, VT_BOTTOM_RIGHT_ICON) &&
           VerifyOffset(verifier, VT_BOTTOM_RIGHT) &&
           verifier.VerifyString(bottom_right()) &&
           VerifyField<int8_t>(verifier, VT_BOTTOM_RIGHT_FONT_SIZE) &&
           verifier.EndTable();
  }
};

struct ShowMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_top_left_icon(Icon top_left_icon) {
    fbb_.AddElement<int16_t>(ShowMessage::VT_TOP_LEFT_ICON, static_cast<int16_t>(top_left_icon), 0);
  }
  void add_top_left(flatbuffers::Offset<flatbuffers::String> top_left) {
    fbb_.AddOffset(ShowMessage::VT_TOP_LEFT, top_left);
  }
  void add_top_left_font_size(int8_t top_left_font_size) {
    fbb_.AddElement<int8_t>(ShowMessage::VT_TOP_LEFT_FONT_SIZE, top_left_font_size, 12);
  }
  void add_top_right_icon(Icon top_right_icon) {
    fbb_.AddElement<int16_t>(ShowMessage::VT_TOP_RIGHT_ICON, static_cast<int16_t>(top_right_icon), 0);
  }
  void add_top_right(flatbuffers::Offset<flatbuffers::String> top_right) {
    fbb_.AddOffset(ShowMessage::VT_TOP_RIGHT, top_right);
  }
  void add_top_right_font_size(int8_t top_right_font_size) {
    fbb_.AddElement<int8_t>(ShowMessage::VT_TOP_RIGHT_FONT_SIZE, top_right_font_size, 12);
  }
  void add_bottom_left_icon(Icon bottom_left_icon) {
    fbb_.AddElement<int16_t>(ShowMessage::VT_BOTTOM_LEFT_ICON, static_cast<int16_t>(bottom_left_icon), 0);
  }
  void add_bottom_left(flatbuffers::Offset<flatbuffers::String> bottom_left) {
    fbb_.AddOffset(ShowMessage::VT_BOTTOM_LEFT, bottom_left);
  }
  void add_bottom_left_font_size(int8_t bottom_left_font_size) {
    fbb_.AddElement<int8_t>(ShowMessage::VT_BOTTOM_LEFT_FONT_SIZE, bottom_left_font_size, 12);
  }
  void add_bottom_right_icon(Icon bottom_right_icon) {
    fbb_.AddElement<int16_t>(ShowMessage::VT_BOTTOM_RIGHT_ICON, static_cast<int16_t>(bottom_right_icon), 0);
  }
  void add_bottom_right(flatbuffers::Offset<flatbuffers::String> bottom_right) {
    fbb_.AddOffset(ShowMessage::VT_BOTTOM_RIGHT, bottom_right);
  }
  void add_bottom_right_font_size(int8_t bottom_right_font_size) {
    fbb_.AddElement<int8_t>(ShowMessage::VT_BOTTOM_RIGHT_FONT_SIZE, bottom_right_font_size, 12);
  }
  explicit ShowMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShowMessageBuilder &operator=(const ShowMessageBuilder &);
  flatbuffers::Offset<ShowMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShowMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShowMessage> CreateShowMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    Icon top_left_icon = Icon::None,
    flatbuffers::Offset<flatbuffers::String> top_left = 0,
    int8_t top_left_font_size = 12,
    Icon top_right_icon = Icon::None,
    flatbuffers::Offset<flatbuffers::String> top_right = 0,
    int8_t top_right_font_size = 12,
    Icon bottom_left_icon = Icon::None,
    flatbuffers::Offset<flatbuffers::String> bottom_left = 0,
    int8_t bottom_left_font_size = 12,
    Icon bottom_right_icon = Icon::None,
    flatbuffers::Offset<flatbuffers::String> bottom_right = 0,
    int8_t bottom_right_font_size = 12) {
  ShowMessageBuilder builder_(_fbb);
  builder_.add_bottom_right(bottom_right);
  builder_.add_bottom_left(bottom_left);
  builder_.add_top_right(top_right);
  builder_.add_top_left(top_left);
  builder_.add_bottom_right_icon(bottom_right_icon);
  builder_.add_bottom_left_icon(bottom_left_icon);
  builder_.add_top_right_icon(top_right_icon);
  builder_.add_top_left_icon(top_left_icon);
  builder_.add_bottom_right_font_size(bottom_right_font_size);
  builder_.add_bottom_left_font_size(bottom_left_font_size);
  builder_.add_top_right_font_size(top_right_font_size);
  builder_.add_top_left_font_size(top_left_font_size);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShowMessage> CreateShowMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Icon top_left_icon = Icon::None,
    const char *top_left = nullptr,
    int8_t top_left_font_size = 12,
    Icon top_right_icon = Icon::None,
    const char *top_right = nullptr,
    int8_t top_right_font_size = 12,
    Icon bottom_left_icon = Icon::None,
    const char *bottom_left = nullptr,
    int8_t bottom_left_font_size = 12,
    Icon bottom_right_icon = Icon::None,
    const char *bottom_right = nullptr,
    int8_t bottom_right_font_size = 12) {
  auto top_left__ = top_left ? _fbb.CreateString(top_left) : 0;
  auto top_right__ = top_right ? _fbb.CreateString(top_right) : 0;
  auto bottom_left__ = bottom_left ? _fbb.CreateString(bottom_left) : 0;
  auto bottom_right__ = bottom_right ? _fbb.CreateString(bottom_right) : 0;
  return Display::CreateShowMessage(
      _fbb,
      top_left_icon,
      top_left__,
      top_left_font_size,
      top_right_icon,
      top_right__,
      top_right_font_size,
      bottom_left_icon,
      bottom_left__,
      bottom_left_font_size,
      bottom_right_icon,
      bottom_right__,
      bottom_right_font_size);
}

struct ProgressBar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ProgressBarTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.ProgressBar";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4,
    VT_PROGRESS = 6,
    VT_DURATION_MICROSECONDS = 8,
    VT_ICON = 10
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  flatbuffers::String *mutable_message() {
    return GetPointer<flatbuffers::String *>(VT_MESSAGE);
  }
  uint32_t progress() const {
    return GetField<uint32_t>(VT_PROGRESS, 0);
  }
  bool mutate_progress(uint32_t _progress) {
    return SetField<uint32_t>(VT_PROGRESS, _progress, 0);
  }
  int64_t duration_microseconds() const {
    return GetField<int64_t>(VT_DURATION_MICROSECONDS, 0);
  }
  bool mutate_duration_microseconds(int64_t _duration_microseconds) {
    return SetField<int64_t>(VT_DURATION_MICROSECONDS, _duration_microseconds, 0);
  }
  Icon icon() const {
    return static_cast<Icon>(GetField<int16_t>(VT_ICON, 0));
  }
  bool mutate_icon(Icon _icon) {
    return SetField<int16_t>(VT_ICON, static_cast<int16_t>(_icon), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint32_t>(verifier, VT_PROGRESS) &&
           VerifyField<int64_t>(verifier, VT_DURATION_MICROSECONDS) &&
           VerifyField<int16_t>(verifier, VT_ICON) &&
           verifier.EndTable();
  }
};

struct ProgressBarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(ProgressBar::VT_MESSAGE, message);
  }
  void add_progress(uint32_t progress) {
    fbb_.AddElement<uint32_t>(ProgressBar::VT_PROGRESS, progress, 0);
  }
  void add_duration_microseconds(int64_t duration_microseconds) {
    fbb_.AddElement<int64_t>(ProgressBar::VT_DURATION_MICROSECONDS, duration_microseconds, 0);
  }
  void add_icon(Icon icon) {
    fbb_.AddElement<int16_t>(ProgressBar::VT_ICON, static_cast<int16_t>(icon), 0);
  }
  explicit ProgressBarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ProgressBarBuilder &operator=(const ProgressBarBuilder &);
  flatbuffers::Offset<ProgressBar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProgressBar>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProgressBar> CreateProgressBar(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    uint32_t progress = 0,
    int64_t duration_microseconds = 0,
    Icon icon = Icon::None) {
  ProgressBarBuilder builder_(_fbb);
  builder_.add_duration_microseconds(duration_microseconds);
  builder_.add_progress(progress);
  builder_.add_message(message);
  builder_.add_icon(icon);
  return builder_.Finish();
}

inline flatbuffers::Offset<ProgressBar> CreateProgressBarDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr,
    uint32_t progress = 0,
    int64_t duration_microseconds = 0,
    Icon icon = Icon::None) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return Display::CreateProgressBar(
      _fbb,
      message__,
      progress,
      duration_microseconds,
      icon);
}

struct DisplayIntent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DisplayIntentTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Display.DisplayIntent";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DISPLAY_TYPE = 4,
    VT_DISPLAY = 6
  };
  DisplayAction display_type() const {
    return static_cast<DisplayAction>(GetField<uint8_t>(VT_DISPLAY_TYPE, 0));
  }
  bool mutate_display_type(DisplayAction _display_type) {
    return SetField<uint8_t>(VT_DISPLAY_TYPE, static_cast<uint8_t>(_display_type), 0);
  }
  const void *display() const {
    return GetPointer<const void *>(VT_DISPLAY);
  }
  template<typename T> const T *display_as() const;
  const ClearDisplay *display_as_ClearDisplay() const {
    return display_type() == DisplayAction::ClearDisplay ? static_cast<const ClearDisplay *>(display()) : nullptr;
  }
  const ShowUserDetails *display_as_ShowUserDetails() const {
    return display_type() == DisplayAction::ShowUserDetails ? static_cast<const ShowUserDetails *>(display()) : nullptr;
  }
  const BeginJobTimer *display_as_BeginJobTimer() const {
    return display_type() == DisplayAction::BeginJobTimer ? static_cast<const BeginJobTimer *>(display()) : nullptr;
  }
  const UpdateJobTimer *display_as_UpdateJobTimer() const {
    return display_type() == DisplayAction::UpdateJobTimer ? static_cast<const UpdateJobTimer *>(display()) : nullptr;
  }
  const StopJobTimer *display_as_StopJobTimer() const {
    return display_type() == DisplayAction::StopJobTimer ? static_cast<const StopJobTimer *>(display()) : nullptr;
  }
  const ShowMessage *display_as_ShowMessage() const {
    return display_type() == DisplayAction::ShowMessage ? static_cast<const ShowMessage *>(display()) : nullptr;
  }
  const ProgressBar *display_as_ProgressBar() const {
    return display_type() == DisplayAction::ProgressBar ? static_cast<const ProgressBar *>(display()) : nullptr;
  }
  void *mutable_display() {
    return GetPointer<void *>(VT_DISPLAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DISPLAY_TYPE) &&
           VerifyOffset(verifier, VT_DISPLAY) &&
           VerifyDisplayAction(verifier, display(), display_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ClearDisplay *DisplayIntent::display_as<ClearDisplay>() const {
  return display_as_ClearDisplay();
}

template<> inline const ShowUserDetails *DisplayIntent::display_as<ShowUserDetails>() const {
  return display_as_ShowUserDetails();
}

template<> inline const BeginJobTimer *DisplayIntent::display_as<BeginJobTimer>() const {
  return display_as_BeginJobTimer();
}

template<> inline const UpdateJobTimer *DisplayIntent::display_as<UpdateJobTimer>() const {
  return display_as_UpdateJobTimer();
}

template<> inline const StopJobTimer *DisplayIntent::display_as<StopJobTimer>() const {
  return display_as_StopJobTimer();
}

template<> inline const ShowMessage *DisplayIntent::display_as<ShowMessage>() const {
  return display_as_ShowMessage();
}

template<> inline const ProgressBar *DisplayIntent::display_as<ProgressBar>() const {
  return display_as_ProgressBar();
}

struct DisplayIntentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_display_type(DisplayAction display_type) {
    fbb_.AddElement<uint8_t>(DisplayIntent::VT_DISPLAY_TYPE, static_cast<uint8_t>(display_type), 0);
  }
  void add_display(flatbuffers::Offset<void> display) {
    fbb_.AddOffset(DisplayIntent::VT_DISPLAY, display);
  }
  explicit DisplayIntentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DisplayIntentBuilder &operator=(const DisplayIntentBuilder &);
  flatbuffers::Offset<DisplayIntent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DisplayIntent>(end);
    return o;
  }
};

inline flatbuffers::Offset<DisplayIntent> CreateDisplayIntent(
    flatbuffers::FlatBufferBuilder &_fbb,
    DisplayAction display_type = DisplayAction::NONE,
    flatbuffers::Offset<void> display = 0) {
  DisplayIntentBuilder builder_(_fbb);
  builder_.add_display(display);
  builder_.add_display_type(display_type);
  return builder_.Finish();
}

inline bool VerifyDisplayAction(flatbuffers::Verifier &verifier, const void *obj, DisplayAction type) {
  switch (type) {
    case DisplayAction::NONE: {
      return true;
    }
    case DisplayAction::ClearDisplay: {
      auto ptr = reinterpret_cast<const ClearDisplay *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DisplayAction::ShowUserDetails: {
      auto ptr = reinterpret_cast<const ShowUserDetails *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DisplayAction::BeginJobTimer: {
      auto ptr = reinterpret_cast<const BeginJobTimer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DisplayAction::UpdateJobTimer: {
      auto ptr = reinterpret_cast<const UpdateJobTimer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DisplayAction::StopJobTimer: {
      auto ptr = reinterpret_cast<const StopJobTimer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DisplayAction::ShowMessage: {
      auto ptr = reinterpret_cast<const ShowMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DisplayAction::ProgressBar: {
      auto ptr = reinterpret_cast<const ProgressBar *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyDisplayActionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDisplayAction(
        verifier,  values->Get(i), types->GetEnum<DisplayAction>(i))) {
      return false;
    }
  }
  return true;
}

inline const flatbuffers::TypeTable *IconTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    IconTypeTable
  };
  static const int64_t values[] = { 0, 1, 2, 3, 10004 };
  static const char * const names[] = {
    "None",
    "Healthy",
    "Warning",
    "Error",
    "HeavyCheckmark"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 5, type_codes, type_refs, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DisplayActionTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 5 },
    { flatbuffers::ET_SEQUENCE, 0, 6 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ClearDisplayTypeTable,
    ShowUserDetailsTypeTable,
    BeginJobTimerTypeTable,
    UpdateJobTimerTypeTable,
    StopJobTimerTypeTable,
    ShowMessageTypeTable,
    ProgressBarTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "ClearDisplay",
    "ShowUserDetails",
    "BeginJobTimer",
    "UpdateJobTimer",
    "StopJobTimer",
    "ShowMessage",
    "ProgressBar"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 8, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ClearDisplayTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ShowUserDetailsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "name",
    "email",
    "makerlabs_id",
    "tag_id"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *BeginJobTimerTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *UpdateJobTimerTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *StopJobTimerTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ShowMessageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, -1 },
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, -1 },
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, -1 },
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    IconTypeTable
  };
  static const char * const names[] = {
    "top_left_icon",
    "top_left",
    "top_left_font_size",
    "top_right_icon",
    "top_right",
    "top_right_font_size",
    "bottom_left_icon",
    "bottom_left",
    "bottom_left_font_size",
    "bottom_right_icon",
    "bottom_right",
    "bottom_right_font_size"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 12, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ProgressBarTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_SHORT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    IconTypeTable
  };
  static const char * const names[] = {
    "message",
    "progress",
    "duration_microseconds",
    "icon"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DisplayIntentTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    DisplayActionTypeTable
  };
  static const char * const names[] = {
    "display_type",
    "display"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const Display::DisplayIntent *GetDisplayIntent(const void *buf) {
  return flatbuffers::GetRoot<Display::DisplayIntent>(buf);
}

inline const Display::DisplayIntent *GetSizePrefixedDisplayIntent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Display::DisplayIntent>(buf);
}

inline DisplayIntent *GetMutableDisplayIntent(void *buf) {
  return flatbuffers::GetMutableRoot<DisplayIntent>(buf);
}

inline const char *DisplayIntentIdentifier() {
  return "Disp";
}

inline bool DisplayIntentBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, DisplayIntentIdentifier());
}

inline bool VerifyDisplayIntentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Display::DisplayIntent>(DisplayIntentIdentifier());
}

inline bool VerifySizePrefixedDisplayIntentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Display::DisplayIntent>(DisplayIntentIdentifier());
}

inline const char *DisplayIntentExtension() {
  return "fb";
}

inline void FinishDisplayIntentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Display::DisplayIntent> root) {
  fbb.Finish(root, DisplayIntentIdentifier());
}

inline void FinishSizePrefixedDisplayIntentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Display::DisplayIntent> root) {
  fbb.FinishSizePrefixed(root, DisplayIntentIdentifier());
}

}  // namespace Display

#endif  // FLATBUFFERS_GENERATED_DISPLAY_DISPLAY_H_
