define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-a11y-announcer/iron-a11y-announcer.js","../../vaadin-text-field/src/vaadin-text-field.js","../../vaadin-control-state-mixin/vaadin-control-state-mixin.js","../../vaadin-themable-mixin/vaadin-themable-mixin.js","./vaadin-combo-box-mixin.js","./vaadin-combo-box-dropdown-wrapper.js","../../vaadin-element-mixin/vaadin-element-mixin.js","../../../@polymer/polymer/lib/utils/html-tag.js"],function(_exports,_polymerElement,_ironA11yAnnouncer,_vaadinTextField,_vaadinControlStateMixin,_vaadinThemableMixin,_vaadinComboBoxMixin,_vaadinComboBoxDropdownWrapper,_vaadinElementMixin,_htmlTag){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.ComboBoxElement=void 0;class ComboBoxElement extends(0,_vaadinElementMixin.ElementMixin)((0,_vaadinControlStateMixin.ControlStateMixin)((0,_vaadinThemableMixin.ThemableMixin)((0,_vaadinComboBoxMixin.ComboBoxMixin)(_polymerElement.PolymerElement)))){static get template(){return _htmlTag.html`
    <style>
      :host {
        display: inline-block;
      }

      :host([hidden]) {
        display: none !important;
      }

      :host([opened]) {
        pointer-events: auto;
      }

      [part="text-field"] {
        width: 100%;
        min-width: 0;
      }

      [part="clear-button"],
      [part="toggle-button"] {
        font-family: 'vaadin-combo-box-icons';
      }

      [part="clear-button"]::before {
        content: "\\e901";
      }

      [part="toggle-button"]::before {
        content: "\\e900";
      }

      :host([disabled]) [part="clear-button"],
      :host([readonly]) [part="clear-button"],
      :host(:not([has-value])) [part="clear-button"] {
        display: none;
      }
    </style>

    <vaadin-text-field part="text-field" id="input" pattern="[[pattern]]" prevent-invalid-input="[[preventInvalidInput]]" value="{{_inputElementValue}}" autocomplete="off" invalid="[[invalid]]" label="[[label]]" name="[[name]]" placeholder="[[placeholder]]" required="[[required]]" disabled="[[disabled]]" readonly="[[readonly]]" error-message="[[errorMessage]]" autocapitalize="none" autofocus="[[autofocus]]" on-change="_stopPropagation" on-input="_inputValueChanged">
      <slot name="prefix" slot="prefix"></slot>

      <div part="clear-button" id="clearButton" slot="suffix" role="button" aria-label="Clear"></div>
      <div part="toggle-button" id="toggleButton" slot="suffix" role="button" aria-label="Toggle"></div>

    </vaadin-text-field>

    <vaadin-combo-box-dropdown-wrapper id="overlay" opened="[[opened]]" position-target="[[_getPositionTarget()]]" _focused-index="[[_focusedIndex]]" _item-label-path="[[itemLabelPath]]" loading="[[loading]]">
    </vaadin-combo-box-dropdown-wrapper>
`}static get is(){return"vaadin-combo-box"}static get version(){return"4.0.1-pre.2"}static get properties(){return{label:{type:String,reflectToAttribute:!0},required:{type:Boolean,value:!1},disabled:{type:Boolean,value:!1},preventInvalidInput:{type:Boolean},pattern:{type:String},errorMessage:{type:String},autofocus:{type:Boolean},placeholder:{type:String,value:""},readonly:{type:Boolean,value:!1}}}static get observers(){return["_updateAriaExpanded(opened)"]}attributeChanged(){const isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);if(isSafari&&this.root){Array.prototype.forEach.call(this.root.querySelectorAll("*"),el=>{el.style["-webkit-backface-visibility"]="visible";el.style["-webkit-backface-visibility"]=""})}}ready(){super.ready();this._nativeInput=this.$.input.focusElement;this._toggleElement=this.$.toggleButton;this._clearElement=this.$.clearButton;this._nativeInput.setAttribute("role","combobox");this._nativeInput.setAttribute("aria-autocomplete","list");this._updateAriaExpanded()}connectedCallback(){super.connectedCallback();this._preventInputBlur()}disconnectedCallback(){super.disconnectedCallback();this._restoreInputBlur()}_getPositionTarget(){return this.$.input}_updateAriaExpanded(){if(this._nativeInput){this._nativeInput.setAttribute("aria-expanded",this.opened);this._toggleElement.setAttribute("aria-expanded",this.opened)}}get inputElement(){return this.$.input}get focusElement(){return this.inputElement||this}}_exports.ComboBoxElement=ComboBoxElement;customElements.define(ComboBoxElement.is,ComboBoxElement)});