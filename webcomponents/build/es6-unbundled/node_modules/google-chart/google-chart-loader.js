define(["../@polymer/polymer/polymer-legacy.js","./charts-loader.js","../@polymer/polymer/lib/legacy/polymer-fn.js"],function(_polymerLegacy,_chartsLoader,_polymerFn){"use strict";var DEFACTO_CHART_PACKAGE="corechart",Namespace={CHARTS:"charts",VIS:"visualization"},CHART_CONSTRUCTORS={area:{ctor:"AreaChart"},bar:{ctor:"BarChart"},"md-bar":{ctor:"Bar",pkg:"bar"},bubble:{ctor:"BubbleChart"},calendar:{ctor:"Calendar",pkg:"calendar"},candlestick:{ctor:"CandlestickChart"},column:{ctor:"ColumnChart"},combo:{ctor:"ComboChart"},gauge:{ctor:"Gauge",pkg:"gauge"},geo:{ctor:"GeoChart"},histogram:{ctor:"Histogram"},line:{ctor:"LineChart"},"md-line":{ctor:"Line",pkg:"line"},org:{ctor:"OrgChart",pkg:"orgchart"},pie:{ctor:"PieChart"},sankey:{ctor:"Sankey",pkg:"sankey"},scatter:{ctor:"ScatterChart"},"md-scatter":{ctor:"Scatter",pkg:"scatter"},"stepped-area":{ctor:"SteppedAreaChart"},table:{ctor:"Table",pkg:"table"},timeline:{ctor:"Timeline",pkg:"timeline"},treemap:{ctor:"TreeMap",pkg:"treemap"},wordtree:{ctor:"WordTree",namespace:Namespace.VIS,pkg:"wordtree"}};function namespaceForType(type){return google[0===type.indexOf("md-")?Namespace.CHARTS:Namespace.VIS]}var packagesToLoad={},promises={},resolves={};(0,_polymerFn.Polymer)({is:"google-chart-loader",properties:{packages:{type:Array,value:function(){return[]},observer:"_loadPackages"},type:{type:String,observer:"_loadPackageForType"}},get _corePackage(){if(promises[DEFACTO_CHART_PACKAGE]){return promises[DEFACTO_CHART_PACKAGE]}return this._loadPackages([DEFACTO_CHART_PACKAGE]).then(function(pkgs){return pkgs[0]})},_loadPackagesDebounce:function(){this.debounce("loadPackages",function(){var packages=Object.keys(packagesToLoad);if(!packages.length){return}packagesToLoad={};google.charts.load("current",{packages:packages,language:document.documentElement.lang||"en"});google.charts.setOnLoadCallback(function(){packages.forEach(function(pkg){this.fire("loaded",pkg);resolves[pkg](google.visualization)}.bind(this))}.bind(this))},100)},_loadPackages:function(pkgs){var returns=[];pkgs.forEach(function(pkg){if(!promises[pkg]){packagesToLoad[pkg]=!0;promises[pkg]=new Promise(function(resolve){resolves[pkg]=resolve});this._loadPackagesDebounce()}returns.push(promises[pkg])}.bind(this));return Promise.all(returns)},_loadPackageForType:function(type){var chartData=CHART_CONSTRUCTORS[type];if(!chartData){return Promise.reject("This chart type is not yet supported: "+type)}return this._loadPackages([chartData.pkg||DEFACTO_CHART_PACKAGE]).then(function(){var namespace=google[chartData.namespace]||namespaceForType(type);return namespace[chartData.ctor]})},create:function(type,el){return this._loadPackageForType(type).then(function(ctor){return new ctor(el)})},fireOnChartEvent:function(chart,eventName,opt_once){return this._corePackage.then(function(viz){var adder=opt_once?viz.events.addOneTimeListener:viz.events.addListener;adder(chart,eventName,function(event){this.fire("google-chart-"+eventName,{chart:chart,data:event})}.bind(this))}.bind(this))},dataTable:function(data){return this._corePackage.then(function(viz){if(null==data){return new viz.DataTable}else if(data.getNumberOfRows){return data}else if(data.cols){return new viz.DataTable(data)}else if(0<data.length){return viz.arrayToDataTable(data)}else if(0===data.length){return Promise.reject("Data was empty.")}return Promise.reject("Data format was not recognized.")})},dataView:function(data){return this._corePackage.then(function(viz){return new viz.DataView(data)})},query:function(url,opt_options){return this._corePackage.then(function(viz){return new viz.Query(url,opt_options)})}})});