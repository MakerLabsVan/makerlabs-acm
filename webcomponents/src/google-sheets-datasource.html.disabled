<link rel="import" href="../bower_components/polymer/polymer-element.html">

<dom-module id="view-user-form">
  <!-- Google Sign-In, Sheets, Charts, ... -->
  <link rel="import" href="../bower_components/google-signin/google-signin.html">
  <link rel="import" href="../bower_components/google-apis/google-apis.html">
  <link rel="import" href="../bower_components/google-chart/google-chart-loader.html">

  <template>
    <!-- Google Data, APIs, and Auth -->
    <google-signin-aware
      on-google-signin-aware-success="handleAuthSignIn"
      on-google-signin-aware-signed-out="handleAuthSignOut"
    ></google-signin-aware>
    <google-chart-loader></google-chart-loader>
  </template>

  <script>
    class GoogleSheetsDatasource extends Polymer.Element {
      static get is() { return 'google-sheets-datasource'; }

      static get properties() {
        return {
          fields: {
            type: Array
          },
          userName: {
            type: String
          },
          query: {
            type: Object
          }
        }
      }

      get sheetId() { return '1Sd3nYY34dllVUsakwU8hLnJQ1m-U50qZwQSxst2SKKg'; }

      get sheetGids {
        return {
          'Users': '653502556',
          'Activity': '1547381894'
        };
      }
      get usersSheetGid() { return ; }
      get usersSheetNumHeaders() { return 2; }

      get activitySheetGid() { return '1547381894'; }
      get activitySheetNumHeaders() { return 1; }

      get accessToken() {
        var accessToken = null;

        var authInstance = (
          gapi
          && gapi.auth2
          && gapi.auth2.getAuthInstance()
        );

        if (authInstance)
        {
          var currentUser = (
            authInstance
            && authInstance.currentUser
            && authInstance.currentUser.get()
          );

          if (currentUser) {
            var authResponse = currentUser.getAuthResponse(true);
            if (authResponse) {
              if ('access_token' in authResponse) {
                accessToken = authResponse['access_token'];
              }
            }
          }
        }

        return accessToken;
      }

      connectedCallback() {
        super.connectedCallback();

        // Attach auth callbacks
        var aware = this.shadowRoot.querySelector('google-signin-aware');
        aware.handleAuthSignIn = this.handleAuthSignIn;
        aware.handleAuthSignOut = this.handleAuthSignOut;
        aware.handleAuthStateChange = this.handleAuthStateChange;
      }

      ready() {
        super.ready();
        var intervalId = setInterval(
          function() {
            if (gapi.client) {
              var clients = this.querySelectorAll("google-client-loader");
              for (var i = 0; i < clients.length; i++) {
                console.log("Force loaded gapi.client");
                clients[i]._loadClient();
              }

              console.log("trigger initial query here");
              clearInterval(intervalId);
            }
            else {
              console.log("Missing gapi.client");
              gapi.load('client', function(){});
            }
          }.bind(this),
          2000
        );
        console.log("initialQuery");
        console.log(this.query);
        if (
          this.query
          && "name" in this.query
        ) {
          this.userName = this.query["name"];
          this.queryUsers("where " + this.nameColumn + " = '" + this.userName + "'").then(function(q) {
            q.send(function(res) {
              var values = this.getFirstRowValuesFromResponse(res);
              if (values && values.length) {
                this.showUser(values);
              }
            }.bind(this));
          }.bind(this));
        }
      }

      getValuesFromResponse(res) {
        var datatable = res.getDataTable();
        var values = [];
        if (
          datatable
          && datatable.getNumberOfRows()
          && datatable.getNumberOfColumns()
        )
        {
          for (var rowIdx = 0; rowIdx < datatable.getNumberOfRows(); rowIdx++)
          {
            var rowValues = [];

            for (var colIdx = 0; colIdx < datatable.getNumberOfColumns(); colIdx++)
            {
              rowValues.push(datatable.getValue(rowIdx, colIdx));
            }

            values.push(rowValues);
          }
        }

        return values;
      }

      getFirstRowValuesFromResponse(res) {
        var values = this.getValuesFromResponse(res);
        return (
          values
          && values.length
          && values[0]
        );
      }

      handleAuthSignIn(response) {
        console.log("did get sign in");

        if (this.accessToken) {
          if (this.userName)
          {
            console.log("username '" + this.userName + "'");
            this.queryUsers("where " + this.nameColumn + " = '" + this.userName + "'").then(function(q) {
              q.send(function(res) {
                var values = this.getFirstRowValuesFromResponse(res);
                if (values && values.length) {
                  this.showUser(values);
                }
              }.bind(this));
            }.bind(this));
          }
        }

        if (this.accessToken) {
          var el = this.shadowRoot.getElementById(this.tagIdColumn);
          if (el) {
            this.queryActivity("select C,count(E) group by " + this.tagIdColumn).then(function(q) {
              q.send(function(res) {
                var items = [];
                var values = this.getValuesFromResponse(res);
                if (values && values.length) {
                  for (var rowIdx = 0; rowIdx < values.length; rowIdx++) {
                    var tagId = values[rowIdx][0];
                    items.push({label: 'Recently scanned: ' + tagId, value: tagId});
                  }

                  el.items = items;
                }
              }.bind(this));
            }.bind(this));
          }
        }

        if (this.accessToken) {
          this.queryUsers("select " + this.searchColumns).then(function(q) {
            q.send(function(res) {
              var datatable = res.getDataTable();
              var users = [];
              var sections = this.fields.map(function(section) { return section.title; });

              if (datatable)
              {
                for (var rowIdx = 0; rowIdx < datatable.getNumberOfRows(); rowIdx++)
                {
                  var currentSection = 0;
                  var rowValues = {};

                  for (var colIdx = 0; colIdx < datatable.getNumberOfColumns(); colIdx++)
                  {
                    var k = datatable.getColumnLabel(colIdx);
                    // Strip section heading if it is present
                    if (k.indexOf(sections[currentSection]) == 0)
                    {
                      k = k.substr(sections[currentSection].length + 1);
                      currentSection++;
                    }
                    // Replace invalid identifier chars with _
                    k = k.replace(/\W/g, '_');

                    var v = datatable.getValue(rowIdx, colIdx);
                    rowValues[k] = v;
                  }

                  if (!('Photo' in rowValues) || !(rowValues['Photo']))
                  {
                    rowValues['Photo'] = this.defaultPhotoUrl;
                  }

                  if ('Name' in rowValues && rowValues['Name'])
                  {
                    users.push(rowValues);
                  }
                }
              }

              var userSearchBar = document.querySelector('user-search-bar');
              if (userSearchBar) {
                userSearchBar.items = users;
              }
            }.bind(this));
          }.bind(this));
        }
      }

      handleAuthSignOut(response) {
        console.log("did get sign out");
      }

      querySheet(sheetGid, query, numHeaders = 1) {
        var queryString = encodeURIComponent(query);

        var loader = this.shadowRoot.querySelector('google-chart-loader');

        return loader.query(
          'https://docs.google.com/spreadsheets/d/'
          + this.sheetId
          + '/gviz/tq'
          + '?gid=' + sheetGid
          + '&access_token=' + this.accessToken
          + '&headers=' + numHeaders
          + '&tq=' + queryString
        );
      }

      queryUsers(query) {
        return this.querySheet(
          this.usersSheetGid,
          query,
          this.usersSheetNumHeaders
        );
      }

      queryActivity(query) {
        return this.querySheet(
          this.activitySheetGid,
          query,
          this.activitySheetNumHeaders
        );
      }

      handleQueryResponse(response) {
        var data = response.getDataTable();
        console.log("handleQueryResponse data");
        console.log(data);
      }

      resetValues() {
        return this.showUser([]);
      }

      showUser(data) {
        var i = 0;
        for (var s = 0; s < this.fields.length; ++s) {
          var section = this.fields[s];

          for (var f = 0; f < section.fields.length; ++f) {
            var val = (i < data.length)? data[i++] : null;
            var field = section.fields[f];

            if (!val)
            {
              // Reset the previous value, if no new value is set.
              val = "";
            }

            if (this._fieldIsCheckboxType(field))
            {
              var el = this.shadowRoot.getElementById(field.name);

              el.checked = (this.isYesLike(val[0]));
            }

            else if (this._fieldIsRadioGroupType(field))
            {
              var el = this.shadowRoot.getElementById(field.name);

              el.select(val);
            }

            else if (this._fieldIsDropdownMenuType(field))
            {
              var el = this.shadowRoot.getElementById(field.name);
              var listbox = el.querySelector('paper-listbox');
              var selectedIdx = field.choices.indexOf(val);

              listbox.selected = (selectedIdx >= 0? selectedIdx : 0);
            }

            else if (
              this._fieldIsDatePickerType(field)
              || this._fieldIsTextInputType(field)
            )
            {
              var el = this.shadowRoot.getElementById(field.name);

              el.value = val;
            }

            else if (this._fieldIsImageType(field))
            {
              var photoUrl = val;
              var img = this.shadowRoot.getElementById(field.name);

              img.src = photoUrl;
            }

            else {
              console.log("unknown field name " + field.name);
            }
          }
        }
      }

      handleSubmit() {
        var sheets = document.getElementById('sheets');

        var validTextFieldCount = 0;
        var formValues = [];
        for (var s = 0; s < this.fields.length; ++s) {
          var section = this.fields[s];

          for (var f = 0; f < section.fields.length; ++f) {
            var formValue;
            var field = section.fields[f];

            var el = this.shadowRoot.getElementById(field.name);
            if (el)
            {
              if (this._fieldIsCheckboxType(field))
              {
                formValue = (el.checked? field.choices[1] : field.choices[0]);
              }

              else if (this._fieldIsRadioGroupType(field))
              {
                formValue = el.selected;
              }

              else if (this._fieldIsDropdownMenuType(field))
              {
                formValue = el.value;
              }

              else if (
                this._fieldIsDatePickerType(field)
                || this._fieldIsTextInputType(field)
              )
              {
                formValue = el.value;

                // Check whether any non-empty text value was supplied
                if (formValue) {
                  validTextFieldCount++
                }
              }

              else if (this._fieldIsImageType(field))
              {
                // Ignore emptyImageData
                if (el.src != el.emptyImageData)
                {
                  formValue = el.src;
                }
              }

              else {
                console.log("unknown field " + field.name);
              }
            }

            formValues.push(formValue);
          }
        }

        if (
          sheets
          && sheets.api
          && formValues.length
        ) {
          var rowName = formValues[0];

          if (rowName) {
            console.log("update rowName = " + rowName);
            sheets.api.spreadsheets.values.update({
              spreadsheetId: this.sheetId,
              range: this.sheetName + '!A' + rowName,
              majorDimension: "ROWS",
              valueInputOption: 'USER_ENTERED',
              values: [formValues]
            }).then(function(response) {
               console.log(response);
            });
          }
          else {
            console.log(formValues);
            if (validTextFieldCount > 0) {
              console.log("create new user");
              formValues[0] = "=row()";

              sheets.api.spreadsheets.values.append({
                spreadsheetId: this.sheetId,
                range: this.sheetName,
                valueInputOption: 'USER_ENTERED',
                insertDataOption: 'INSERT_ROWS',
                values: [formValues]
              }).then(function(response) {
                 console.log(response);
              });
            }
          }
        }
      }

      isYesLike(s) {
        var yesLike = ["☑","Y","y","T","t","Yes","yes","True","true"];
        return (yesLike.indexOf(s) != -1);
      }

      isNoLike(s) {
        var noLike = ["☐","N","n","F","f","No","no","False","false"];
        return (noLike.indexOf(s) != -1);
      }

      // https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript#answer-16436975
      arraysEqual(a, b) {
        if (a === b) return true;
        if (a == null || b == null) return false;
        if (a.length != b.length) return false;

        for (var i = 0; i < a.length; ++i) {
          if (a[i] !== b[i]) return false;
        }
        return true;
      }
    }

    customElements.define(GoogleSheetsDatasource.is, GoogleSheetsDatasource);
  </script>
</dom-module>
